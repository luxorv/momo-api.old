require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe EpisodesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Episode. As you add validations to Episode, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attrs = attributes_for :episode
  }

  let(:invalid_attributes) {
    attrs = attributes_for :genre
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EpisodesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all episodes as @episodes" do
      episodes = Episode.all
      get :index, {}, valid_session
      expect(assigns(:episodes).to_json).to eq(episodes.to_json)
    end
  end

  describe "GET show" do
    it "assigns the requested episode as @episode" do
      episode = Episode.create! valid_attributes
      get :show, {:id => episode.to_param}, valid_session
      expect(assigns(:episode).first).to eq(episode)
    end
  end

  describe "POST create" do
    it "should create a new episode with Pusher" do

      params = {:episode => valid_attributes}
      post :create, params, valid_session

      episode = assigns(:episode)

      # binding.pry

      expect(episode).to be_an(Episode)
      expect(episode.name).to be_a(String)
      expect(episode.synopsis).to be_a(String)

      expect(episode.errors.size).to  eq(0)
    end

    it "should fail creating a new episode with Pusher" do

      params = {:not_episode => valid_attributes}
      post :create, params, valid_session

      episode = assigns(:episode)

      expect(episode.errors.size).to_not  eq(0)
      puts episode.errors
    end
  end

  describe "PUT update" do
    it "should update an episode with Pusher" do

      id = Episode.first.id;
      attrs = valid_attributes
      attrs[:name] = "Name #{Time.now.to_s}"
      params = {:id => id, :episode => attrs}
      # binding.pry
      put :update, params, valid_session

      episode = assigns(:episode)

      # binding.pry

      expect(episode).to be_an(Episode)
      expect(episode.name).to eq(valid_attributes[:name])

      expect(episode.errors.size).to  eq(0)
    end

    it "should fail updating an episode with Pusher" do

      id = Episode.first.id;
      attrs = valid_attributes
      attrs[:name] = nil

      params = {:id => id, :episode => attrs}
      put :update, params, valid_session


      episode = assigns(:episode)

      # binding.pry
      expect(episode.errors.size).not_to  eq(0)
    end
  end

  describe "DELETE destroy" do
    it "should delete an episode with Pusher" do

      episode = Episode.first

      delete :destroy, {:id => episode.id}, valid_session

      expect(episode).not_to eq(Episode.first)
    end

  end

end
